name: Java CI with Gradle   # 수행할 Action명

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]     # 예시엔 main으로 되어있지만, 각각 서비스에 해당하는 브랜치로 정의

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Permission for gradlew    # 빌드 전 권한 부여
        run: chmod +x gradlew

      - name: Build with Gradle          # 프로젝트 빌드
        run: ./gradlew clean build --exclude-task test

      - name: 도커 이미지 빌드
        run: docker build -t hyunik/prezento .

      - name: 도커 허브 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.PREZENTO_DOCKER_USERNAME }}      # 레포지토리 시크릿 키값에 도커허브 아이디
          password: ${{ secrets.PREZENTO_DOCKER_TOKEN }}         # 이전에 발급한 토큰값

      - name: 도커 퍼블리싱
        run: docker push hyunik/prezento      # 빌드한 이미지 도커허브에 push

      - name: ec2 접속 및 애플리케이션 실행
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}           # 배포할 인스턴스 ip
          username: ubuntu                        # 인스턴스 기본 username(ubuntu), 혹시 다른걸로 지정하셨으면 그걸로 쓰시면 됩니다
          key: ${{ secrets.EC2_PEMKEY }}          # 인스턴스 생성 시 발급받은 키페어
          port: 22
          script: |
            echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > /home/ubuntu/application.yml
            
            if [ $(sudo docker ps -q -f name=prezento-backend) ]; then
              sudo docker stop prezento-backend
              sudo docker rm prezento-backend
            fi

            sudo docker pull hyunik/prezento
            sudo docker run -d --name prezento-backend -p 8081:8081 -v /home/ubuntu/application.yml:/app/config/application.yml hyunik/prezento
